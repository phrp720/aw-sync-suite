events {}

http {
    map_hash_bucket_size 128;
    # Remove the "Bearer " prefix from the Authorization header, if present
    map $http_authorization $auth_token {
        default "";
        "~^Bearer\s+(.+)$" $1;  # Extracts the token part only if it starts with "Bearer"
    }

    # Map the extracted token to a valid status if it matches a token in the list
    map $auth_token $auth_allowed {
        default 0;  # default to unauthorized

        # Include the tokens file with only the token values
        include /etc/nginx/tokens.conf;
    }

    # Public server for the write endpoint only
    server {
        listen 80;
        server_name your-prometheus-server;

        location /api/v1/write {
            auth_request /auth;

            # Pass the request to Prometheus
            proxy_pass http://prometheus:9090;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /-/healthy {
            auth_request /auth;

            # Pass the request to Prometheus
            proxy_pass http://prometheus:9090;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location = /auth {
            internal;
            if ($auth_allowed = 1) {
                return 204;  # No content, authentication successful
            }
            return 401;  # Unauthorized
        }

        # Allow access to /graph and other endpoints only internally
        location / {
            internal;  # Only allow internal access to all other endpoints
            proxy_pass http://prometheus:9090;
        }
    }
}
